#!@GUILE@ \
--no-auto-compile -e main
!#


(use-modules (sxml simple)
             (ice-9 match)
             (ice-9 pretty-print)
             (srfi srfi-1)
             (ice-9 string-fun)
             (srfi srfi-26)
             (sxml match))
(define wayland.xml "@WAYLAND_PKGDATADIR@/wayland.xml")
(define (write-commit s)
  (write "#!\n")
  (write s)
  (write "\n!#\n"))

(define (handle-interface x)
  (sxml-match
   x
   ((interface (@ (name ,name)) (description . ,_) . ,rest)
    (filter-map (lambda (o)
                  (case (car o)
                    ((enum)
                     (handle-enum name o))
                    (else #f)))
                rest))
   (,oth '())))

(define (handle-enum interface-name x)

  (sxml-match
   x
   ((enum (@ (name ,enum-name))
          (description . ,_)
          (entry (@ (value ,enum-entry-value) (name ,enum-entry-name)))
          ...)
    (let ((fields (map (lambda (entry-name value)
                         (list (string->symbol
                                (string-upcase (string-append
                                                interface-name
                                                "_" enum-name
                                                "_" entry-name)))
                               (string->number
                                (if (string-prefix? "0x" value)
                                    (string-replace value "#x" 0 2 )
                                    value))))
                       enum-entry-name
                       enum-entry-value)
                  ))
      `(define-public ,(string->symbol
                        (string-replace-substring
                         (string-append "%" interface-name
                                        "-" enum-name "-enum")
                         "_" "-")
                        )
         (bs:enum ',fields))))

   (,oth #f ))
  )

(define (main . arg)
  (define out (call-with-input-file wayland.xml
                (cut xml->sxml <> #:trim-whitespace? #t)))
  (pretty-print '(define-module (wayland protocol)
                   #:use-module (bytestructure-class)))
  (for-each pretty-print (append-map handle-interface (assoc-ref out 'protocol))))
;; Local Variables:
;; mode: scheme
;; End:
